#!/bin/sh
# A dummy resource for the pessimistic scenario
# of the promote/demote the rabbitmq OCF RA
: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
: ${HA_LOGTAG="ocf-dummy"}
: ${HA_LOGFACILITY="daemon"}
# W/A https://github.com/ClusterLabs/resource-agents/issues/734
#. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs
ocf_run() {
        local rc
        local output
        local verbose=1
        local loglevel=err
        local var

        for var in 1 2
        do
            case "$1" in
                "-q")
                    verbose=""
                    shift 1;;
                "-info"|"-warn"|"-err")
                    loglevel=`echo $1 | sed -e s/-//g`
                    shift 1;;
                *)
                    ;;
            esac
        done

        output=`"$@" 2>&1`
        rc=$?
        output=`echo $output`
        if [ $rc -eq 0 ]; then
            if [ "$verbose" -a ! -z "$output" ]; then
                ocf_log info "$output"
            fi
            return $OCF_SUCCESS
        else
            if [ ! -z "$output" ]; then
                ocf_log $loglevel "$output"
            else
                ocf_log $loglevel "command failed: $*"
            fi
            return $rc
        fi
}
ocf_log() {
      logger -p "${HA_LOGFACILITY}.${1}" -t "${HA_LOGTAG}" "${2}"
}
PATH=/sbin:/usr/sbin:/bin:/usr/bin
LL="dummy"
meta_data() {
cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="dummy">
<version>1.0</version>
</resource-agent>
END
}
action_status() {
    local LH="${LL} action_status():"
    ocf_log info "${LH} I'm OK"
    return $OCF_SUCCESS
}
action_monitor() {
    local LH="${LL} action_monitor():"
    ocf_log info "${LH} It's OK"
    ocf_run echo dummy ocf_run
    return $OCF_SUCCESS
}
action_start() {
    local LH="${LL} action_start():"
    ocf_log info "${LH} Started"
    return $OCF_SUCCESS
}
action_stop() {
    local LH="${LL} action_stop():"
    ocf_log info "${LH} Stopped"
    return $OCF_SUCCESS
}
action_notify() {
    local LH="${LL} action_notify():"
    ocf_log info "${LH} Notifying ${OCF_RESKEY_CRM_meta_notify_type}:${OCF_RESKEY_CRM_meta_notify_operation}..."
    if [ "${OCF_RESKEY_CRM_meta_notify_type}" = 'pre' ] ; then
        # PRE- anything notify section
        case "$OCF_RESKEY_CRM_meta_notify_operation" in
            promote)
                ocf_log info "${LH} pre-promote for '${OCF_RESKEY_CRM_meta_notify_promote_uname}' OK"
                return $OCF_SUCCESS
                #return $OCF_NOT_RUNNING
                #return $OCF_ERR_GENERIC
                #exit $OCF_FAILED_MASTER
                ;;
            *)
                ;;
        esac
    fi
    if [ "${OCF_RESKEY_CRM_meta_notify_type}" = 'post' ] ; then
        # POST- anything notify section
        case "$OCF_RESKEY_CRM_meta_notify_operation" in
            promote)
                ocf_log info "${LH} post-promote for '${OCF_RESKEY_CRM_meta_notify_promote_uname}' ERROR"
                #return $OCF_SUCCESS
                #return $OCF_NOT_RUNNING
                return $OCF_ERR_GENERIC
                #exit $OCF_FAILED_MASTER
                ;;
            start)
                ocf_log info "${LH} post-start for '${OCF_RESKEY_CRM_meta_notify_start_uname}' ERROR"
                #return $OCF_SUCCESS
                #return $OCF_NOT_RUNNING
                return $OCF_ERR_GENERIC
                #exit $OCF_FAILED_MASTER
                ;;
            stop)
                ocf_log info "${LH} post-stop for '${OCF_RESKEY_CRM_meta_notify_stop_uname}' ERROR"
                #return $OCF_SUCCESS
                #return $OCF_NOT_RUNNING
                return $OCF_ERR_GENERIC
                #exit $OCF_FAILED_MASTER
                ;;
            demote)
                ocf_log info "${LH} post-demote for for '${OCF_RESKEY_CRM_meta_notify_demote_uname}' FAILED MASTER"
                #return $OCF_SUCCESS
                #return $OCF_NOT_RUNNING
                #return $OCF_ERR_GENERIC
                exit $OCF_FAILED_MASTER
                ;;
            *)  ;;
        esac
    fi
    return $OCF_SUCCESS
}
action_promote() {
    local LH="${LL} action_promote():"
    ocf_log info "${LH} FAILED MASTER"
    #return $OCF_SUCCESS
    #return $OCF_NOT_RUNNING
    #return $OCF_ERR_GENERIC
    exit $OCF_FAILED_MASTER
}
action_demote() {
    local LH="${LL} action_demote():"
    ocf_log info "${LH} FAILED MASTER"
    #return $OCF_SUCCESS
    #return $OCF_NOT_RUNNING
    #return $OCF_ERR_GENERIC
    exit $OCF_FAILED_MASTER
}
#######################################################################
case "$1" in
  meta-data)    meta_data
                exit $OCF_SUCCESS;;
  usage|help)   echo usage
                exit $OCF_SUCCESS;;
esac
# What kind of method was invoked?
case "$1" in
  start)        action_start;;
  stop)         action_stop;;
  status)       action_status;;
  monitor)      action_monitor;;
  validate)     echo action_validate;;
  promote)      action_promote;;
  demote)       action_demote;;
  notify)       action_notify;;
  validate-all) echo action_validate;;
  *)            usage;;
esac
